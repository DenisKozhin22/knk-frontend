/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as UserLayoutImport } from './routes/_user-layout'
import { Route as AdminLayoutImport } from './routes/_admin-layout'
import { Route as IndexImport } from './routes/index'
import { Route as UserLayoutSupportImport } from './routes/_user-layout/support'
import { Route as UserLayoutMyRequestsImport } from './routes/_user-layout/my-requests'
import { Route as UserLayoutCreateRequestImport } from './routes/_user-layout/create-request'
import { Route as AdminLayoutUsersImport } from './routes/_admin-layout/users'
import { Route as AdminLayoutRequestsImport } from './routes/_admin-layout/requests'
import { Route as AdminLayoutAssignedRequestsImport } from './routes/_admin-layout/assigned-requests'

// Create/Update Routes

const LoginRoute = LoginImport.update({
	id: '/login',
	path: '/login',
	getParentRoute: () => rootRoute
} as any)

const UserLayoutRoute = UserLayoutImport.update({
	id: '/_user-layout',
	getParentRoute: () => rootRoute
} as any)

const AdminLayoutRoute = AdminLayoutImport.update({
	id: '/_admin-layout',
	getParentRoute: () => rootRoute
} as any)

const IndexRoute = IndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute
} as any)

const UserLayoutSupportRoute = UserLayoutSupportImport.update({
	id: '/support',
	path: '/support',
	getParentRoute: () => UserLayoutRoute
} as any)

const UserLayoutMyRequestsRoute = UserLayoutMyRequestsImport.update({
	id: '/my-requests',
	path: '/my-requests',
	getParentRoute: () => UserLayoutRoute
} as any)

const UserLayoutCreateRequestRoute = UserLayoutCreateRequestImport.update({
	id: '/create-request',
	path: '/create-request',
	getParentRoute: () => UserLayoutRoute
} as any)

const AdminLayoutUsersRoute = AdminLayoutUsersImport.update({
	id: '/users',
	path: '/users',
	getParentRoute: () => AdminLayoutRoute
} as any)

const AdminLayoutRequestsRoute = AdminLayoutRequestsImport.update({
	id: '/requests',
	path: '/requests',
	getParentRoute: () => AdminLayoutRoute
} as any)

const AdminLayoutAssignedRequestsRoute = AdminLayoutAssignedRequestsImport.update({
	id: '/assigned-requests',
	path: '/assigned-requests',
	getParentRoute: () => AdminLayoutRoute
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof IndexImport
			parentRoute: typeof rootRoute
		}
		'/_admin-layout': {
			id: '/_admin-layout'
			path: ''
			fullPath: ''
			preLoaderRoute: typeof AdminLayoutImport
			parentRoute: typeof rootRoute
		}
		'/_user-layout': {
			id: '/_user-layout'
			path: ''
			fullPath: ''
			preLoaderRoute: typeof UserLayoutImport
			parentRoute: typeof rootRoute
		}
		'/login': {
			id: '/login'
			path: '/login'
			fullPath: '/login'
			preLoaderRoute: typeof LoginImport
			parentRoute: typeof rootRoute
		}
		'/_admin-layout/assigned-requests': {
			id: '/_admin-layout/assigned-requests'
			path: '/assigned-requests'
			fullPath: '/assigned-requests'
			preLoaderRoute: typeof AdminLayoutAssignedRequestsImport
			parentRoute: typeof AdminLayoutImport
		}
		'/_admin-layout/requests': {
			id: '/_admin-layout/requests'
			path: '/requests'
			fullPath: '/requests'
			preLoaderRoute: typeof AdminLayoutRequestsImport
			parentRoute: typeof AdminLayoutImport
		}
		'/_admin-layout/users': {
			id: '/_admin-layout/users'
			path: '/users'
			fullPath: '/users'
			preLoaderRoute: typeof AdminLayoutUsersImport
			parentRoute: typeof AdminLayoutImport
		}
		'/_user-layout/create-request': {
			id: '/_user-layout/create-request'
			path: '/create-request'
			fullPath: '/create-request'
			preLoaderRoute: typeof UserLayoutCreateRequestImport
			parentRoute: typeof UserLayoutImport
		}
		'/_user-layout/my-requests': {
			id: '/_user-layout/my-requests'
			path: '/my-requests'
			fullPath: '/my-requests'
			preLoaderRoute: typeof UserLayoutMyRequestsImport
			parentRoute: typeof UserLayoutImport
		}
		'/_user-layout/support': {
			id: '/_user-layout/support'
			path: '/support'
			fullPath: '/support'
			preLoaderRoute: typeof UserLayoutSupportImport
			parentRoute: typeof UserLayoutImport
		}
	}
}

// Create and export the route tree

interface AdminLayoutRouteChildren {
	AdminLayoutAssignedRequestsRoute: typeof AdminLayoutAssignedRequestsRoute
	AdminLayoutRequestsRoute: typeof AdminLayoutRequestsRoute
	AdminLayoutUsersRoute: typeof AdminLayoutUsersRoute
}

const AdminLayoutRouteChildren: AdminLayoutRouteChildren = {
	AdminLayoutAssignedRequestsRoute: AdminLayoutAssignedRequestsRoute,
	AdminLayoutRequestsRoute: AdminLayoutRequestsRoute,
	AdminLayoutUsersRoute: AdminLayoutUsersRoute
}

const AdminLayoutRouteWithChildren = AdminLayoutRoute._addFileChildren(AdminLayoutRouteChildren)

interface UserLayoutRouteChildren {
	UserLayoutCreateRequestRoute: typeof UserLayoutCreateRequestRoute
	UserLayoutMyRequestsRoute: typeof UserLayoutMyRequestsRoute
	UserLayoutSupportRoute: typeof UserLayoutSupportRoute
}

const UserLayoutRouteChildren: UserLayoutRouteChildren = {
	UserLayoutCreateRequestRoute: UserLayoutCreateRequestRoute,
	UserLayoutMyRequestsRoute: UserLayoutMyRequestsRoute,
	UserLayoutSupportRoute: UserLayoutSupportRoute
}

const UserLayoutRouteWithChildren = UserLayoutRoute._addFileChildren(UserLayoutRouteChildren)

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute
	'': typeof UserLayoutRouteWithChildren
	'/login': typeof LoginRoute
	'/assigned-requests': typeof AdminLayoutAssignedRequestsRoute
	'/requests': typeof AdminLayoutRequestsRoute
	'/users': typeof AdminLayoutUsersRoute
	'/create-request': typeof UserLayoutCreateRequestRoute
	'/my-requests': typeof UserLayoutMyRequestsRoute
	'/support': typeof UserLayoutSupportRoute
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute
	'': typeof UserLayoutRouteWithChildren
	'/login': typeof LoginRoute
	'/assigned-requests': typeof AdminLayoutAssignedRequestsRoute
	'/requests': typeof AdminLayoutRequestsRoute
	'/users': typeof AdminLayoutUsersRoute
	'/create-request': typeof UserLayoutCreateRequestRoute
	'/my-requests': typeof UserLayoutMyRequestsRoute
	'/support': typeof UserLayoutSupportRoute
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	'/': typeof IndexRoute
	'/_admin-layout': typeof AdminLayoutRouteWithChildren
	'/_user-layout': typeof UserLayoutRouteWithChildren
	'/login': typeof LoginRoute
	'/_admin-layout/assigned-requests': typeof AdminLayoutAssignedRequestsRoute
	'/_admin-layout/requests': typeof AdminLayoutRequestsRoute
	'/_admin-layout/users': typeof AdminLayoutUsersRoute
	'/_user-layout/create-request': typeof UserLayoutCreateRequestRoute
	'/_user-layout/my-requests': typeof UserLayoutMyRequestsRoute
	'/_user-layout/support': typeof UserLayoutSupportRoute
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths:
		| '/'
		| ''
		| '/login'
		| '/assigned-requests'
		| '/requests'
		| '/users'
		| '/create-request'
		| '/my-requests'
		| '/support'
	fileRoutesByTo: FileRoutesByTo
	to:
		| '/'
		| ''
		| '/login'
		| '/assigned-requests'
		| '/requests'
		| '/users'
		| '/create-request'
		| '/my-requests'
		| '/support'
	id:
		| '__root__'
		| '/'
		| '/_admin-layout'
		| '/_user-layout'
		| '/login'
		| '/_admin-layout/assigned-requests'
		| '/_admin-layout/requests'
		| '/_admin-layout/users'
		| '/_user-layout/create-request'
		| '/_user-layout/my-requests'
		| '/_user-layout/support'
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute
	AdminLayoutRoute: typeof AdminLayoutRouteWithChildren
	UserLayoutRoute: typeof UserLayoutRouteWithChildren
	LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AdminLayoutRoute: AdminLayoutRouteWithChildren,
	UserLayoutRoute: UserLayoutRouteWithChildren,
	LoginRoute: LoginRoute
}

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin-layout",
        "/_user-layout",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_admin-layout": {
      "filePath": "_admin-layout.tsx",
      "children": [
        "/_admin-layout/assigned-requests",
        "/_admin-layout/requests",
        "/_admin-layout/users"
      ]
    },
    "/_user-layout": {
      "filePath": "_user-layout.tsx",
      "children": [
        "/_user-layout/create-request",
        "/_user-layout/my-requests",
        "/_user-layout/support"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_admin-layout/assigned-requests": {
      "filePath": "_admin-layout/assigned-requests.tsx",
      "parent": "/_admin-layout"
    },
    "/_admin-layout/requests": {
      "filePath": "_admin-layout/requests.tsx",
      "parent": "/_admin-layout"
    },
    "/_admin-layout/users": {
      "filePath": "_admin-layout/users.tsx",
      "parent": "/_admin-layout"
    },
    "/_user-layout/create-request": {
      "filePath": "_user-layout/create-request.tsx",
      "parent": "/_user-layout"
    },
    "/_user-layout/my-requests": {
      "filePath": "_user-layout/my-requests.tsx",
      "parent": "/_user-layout"
    },
    "/_user-layout/support": {
      "filePath": "_user-layout/support.tsx",
      "parent": "/_user-layout"
    }
  }
}
ROUTE_MANIFEST_END */
